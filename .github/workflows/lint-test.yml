name: Lint & Test

on:
  push:
    branches: [main, dev]

jobs:
  pre-commit-checks:
    name: Lint, Unit Test and Pre-commit Checks
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Check for disabled pre-commit checks in .pre-commit-config.yaml
      run: |
        if grep '^[[:space:]]*#' .pre-commit-config.yaml; then
          echo "Found commented lines in .pre-commit-config.yaml. Please remove them to proceed."
          exit 1
        fi

    - name: Set up Python
      uses: actions/setup-python@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Cache Go and pre-commit data
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
          ~/.cache/pip
          ~/pre-commit-2.20.0.pyz
          $(go env GOPATH)/bin
        key: ${{ runner.os }}-go-precommit-${{ hashFiles('**/go.sum', '**/requirements*.txt', 'pre-commit-2.20.0.pyz') }}
        restore-keys: |
          ${{ runner.os }}-go-precommit-

    - name: Install Go tools
      run: |
        PATH="$(go env GOPATH)/bin:$PATH"
        if ! command -v goimports &> /dev/null; then
          go install golang.org/x/tools/cmd/goimports@v0.6.0
        fi
        if ! command -v golangci-lint &> /dev/null; then
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.51.0
        fi
        if ! command -v gocritic &> /dev/null; then
          go install github.com/go-critic/go-critic/cmd/gocritic@v0.6.5
        fi
      env:
        PATH: $(go env GOPATH)/bin:$PATH

    - name: Download pre-commit if not cached
      run: |
        if [ ! -f ~/pre-commit-2.20.0.pyz ]; then
          echo "Downloading pre-commit..."
          wget -P ~ https://github.com/pre-commit/pre-commit/releases/download/v2.20.0/pre-commit-2.20.0.pyz
        else
          echo "Using cached pre-commit."
        fi

    - name: Run pre-commit checks on all files
      run: python3 ~/pre-commit-2.20.0.pyz run --all-files

  tag:
    name: Semantic Release Tag
    runs-on: ubuntu-22.04
    needs: [pre-commit-checks]
    outputs:
      new: ${{ steps.semantic.outputs.new-release-published }}
      version: ${{ steps.semantic.outputs.release-version }}

    steps:
      - uses: actions/checkout@v3

      - name: Tag Semantic Release Version
        id: semantic
        uses: codfish/semantic-release-action@v3
        with:
          branches: |
            [
              'main',
              {
                name: 'dev',
                prerelease: 'dev'
              }
            ]
          tag-format: "v${version}"
          additional-packages: |
            ['@semantic-release/commit-analyzer']
          plugins: |
            ['@semantic-release/commit-analyzer']
